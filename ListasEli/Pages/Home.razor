@page "/"
@using ListasEli.Models
@using ListasEli.Services

<PageTitle>LES</PageTitle>

<h1>Lista Enlazada Simple</h1>

<h3>Agregar Nodo</h3>
<input type="text" name="valor" @bind-value="Valor" class="form-control" placeholder="Valor del nodo" />
<input type="text" name="posicion" @bind-value="Dato" class="form-control" placeholder="DatoX" />
<button @onclick="AgregarInicio" class="btn btn-success">Agregar nodo al Inicio</button>
<button @onclick="AgregarFinal" class="btn btn-primary">Agregar nodo al Final</button>
<button @onclick="Agregardepuesdedatox" class="btn btn-primary">Agregar Nodo Después de dato X</button>
<button @onclick="Agregarantesdedatox" class="btn btn-primary">Agregar Nodo Antes de dato X</button>

<hr />

<h3>Eliminar Nodo</h3>
<input type="text" name="datoEliminar" @bind-value="Dato" class="form-control" placeholder="DatoX para eliminar" />
<button @onclick="EliminarInicio" class="btn btn-danger">Eliminar Inicio</button>
<button @onclick="EliminarFinal" class="btn btn-danger">Eliminar Final</button>
<button @onclick="EliminarAntesDeDato" class="btn btn-danger">Eliminar Antes de Dato X</button>
<button @onclick="EliminarDespuesDeDato" class="btn btn-danger">Eliminar Después de Dato X</button>
<button @onclick="OrdenarLista" class="btn btn-warning">Ordenar Lista</button>

<ul class="list-group">
    @{
        Nodo nodoTemporal = Lista.PrimerNodo;
        while (nodoTemporal != null)
        {
            <li class="list-group-item">@nodoTemporal.Informacion</li>
            nodoTemporal = nodoTemporal.Referencia;
        }
    }
</ul>

@code {
    public string Dato;
    public string Valor { get; set; }
    public LES Lista { get; set; }

    protected override void OnInitialized()
    {
        Lista = new LES();
        base.OnInitialized();
    }

    public void AgregarFinal() => Lista.AgregarNodoFinal(CrearNodo());
    public void AgregarInicio() => Lista.AgregarNodoInicio(CrearNodo());
    public void Agregardepuesdedatox() { if (!string.IsNullOrEmpty(Dato)) Lista.AgregarNodoDespuesDe(Dato, CrearNodo()); }
    public void Agregarantesdedatox() { if (!string.IsNullOrEmpty(Dato)) Lista.AgregarNodoAntesDe(Dato, CrearNodo()); }

    public void EliminarInicio() => Lista.EliminarInicio();
    public void EliminarFinal() => Lista.EliminarFinal();
    public void EliminarAntesDeDato() { if (!string.IsNullOrEmpty(Dato)) Lista.EliminarAntesDe(Dato); }
    public void EliminarDespuesDeDato() { if (!string.IsNullOrEmpty(Dato)) Lista.EliminarDespuesDe(Dato); }
    public void OrdenarLista() => Lista.OrdenarLista();

    Nodo CrearNodo() => new Nodo(Valor);
}
